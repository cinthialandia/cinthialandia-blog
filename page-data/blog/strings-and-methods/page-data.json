{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/strings-and-methods/","result":{"data":{"markdownRemark":{"html":"<h2>String</h2>\n<p>The string is used to represent and manipulate a sequence of characters, they are useful for holding data that can be represented in a text form. Strings can be created as primitives, strings literals, or as objects.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const str = &quot;Hello I'm a string&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello I'm a string\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>String and properties</h2>\n<h3>String length</h3>\n<p>The length of the string property returns the length of the string, this information is just read-only.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const str = &quot;Cinthia!&quot;\nconsole.log(str.length) // the console will print 8`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Cinthia!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 8</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>In this example, we have a string with a name and we used the length property to know the length of <code class=\"language-text\">str</code>, in our console, will return the value that in this case is 8.</p>\n<h2>String methods</h2>\n<h3>ToUpperCase()</h3>\n<p>This method returns a string with the value converted in uppercase.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const stringUpperCase = &quot;I just need pizza, wifi, and sleep!&quot;\n\nconsole.log(stringUpperCase.toUpperCase())\n// console will print 'I JUST NEED PIZZA, WIFI, AND SLEEP!'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringUpperCase <span class=\"token operator\">=</span> <span class=\"token string\">\"I just need pizza, wifi, and sleep!\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringUpperCase<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// console will print 'I JUST NEED PIZZA, WIFI, AND SLEEP!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a phrase in lowercase, we apply the <code class=\"language-text\">toUpperCase</code> method to the string and will convert the phrase in uppercase.</p>\n<h3>ToLowerCase()</h3>\n<p>Is a method that returns a string value convert in lowercase.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const stringLowerCase = &quot;I Just nEEd piZZa, WIFI, aNd sLeep!&quot;\nconsole.log(stringLowerCase.toLowerCase())\n// console will print 'i just need pizza, wifi, and sleep!'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stringLowerCase <span class=\"token operator\">=</span> <span class=\"token string\">\"I Just nEEd piZZa, WIFI, aNd sLeep!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stringLowerCase<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// console will print 'i just need pizza, wifi, and sleep!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a phrase in uppercase and lowercase, we applied the method <code class=\"language-text\">toLowerCase()</code> to the string and will convert the phrase in lowercase.</p>\n<h3>Concat()</h3>\n<p>Is a method that receives and concatenates a string and returns a new string.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function sayHello(name) {\n  console.log(\n    &quot;hello and welcome to your profile&quot;.concat(\n      &quot; &quot;,\n      name,\n      &quot; &quot;,\n      &quot;have a nice day!&quot;\n    )\n  )\n}\n\nsayHello(&quot;Cinthia&quot;) // the console will print 'hello and welcome to your profile Cinthia have a nice day!'\nsayHello(&quot;Britney Spears&quot;) // the console will print 'hello and welcome to your profile Britney Spears have a nice day!'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"hello and welcome to your profile\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"have a nice day!\"</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cinthia\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Cinthia have a nice day!'</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Britney Spears\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Britney Spears have a nice day!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function that receives a name as a string and we want to concatenate with a message, in this case, we declare the first string and then we apply the <code class=\"language-text\">concat()</code> method, inside this method we declare all the necessary strings separated by a comma.</p>\n<h4>Another way to concatenate strings</h4>\n<h5>The + Operator</h5>\n<p>The <code class=\"language-text\">+</code> operator can be used to concatenate two strings.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function sayHello(name) {\n  console.log(\n    &quot;hello and welcome to your profile&quot; + &quot; &quot; + name + &quot; &quot; + &quot;have a nice day!&quot;\n  )\n}\n\nsayHello(&quot;Cinthia&quot;) // the console will print 'hello and welcome to your profile Cinthia have a nice day!'\nsayHello(&quot;Britney Spears&quot;) // the console will print 'hello and welcome to your profile Britney Spears have a nice day!'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"hello and welcome to your profile\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"have a nice day!\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cinthia\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Cinthia have a nice day!'</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Britney Spears\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Britney Spears have a nice day!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We have the same example as the last one, but this time we are going to concatenate the string with the addition operator, as you can see we have the same result.</p>\n<h5>Template literals or template string</h5>\n<p>The template literals allow set expressions enclosed by backtick, those are going to be indicated by the dollar sign and curly braces <code class=\"language-text\">${string or expression}</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function sayHello(name) {\n  console.log(\n    \\`\\${&quot;hello and welcome to your profile0 \\${name}&quot;} \\${&quot;have a nice day!&quot;}\\`\n  )\n}\n\nsayHello(&quot;Cinthia&quot;) // the console will print 'hello and welcome to your profile Cinthia have a nice day!'\nsayHello(&quot;Britney Spears&quot;) // the console will print 'hello and welcome to your profile Britney Spears have a nice day!'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">\"hello and welcome to your profile0 ${name}\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">\"have a nice day!\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cinthia\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Cinthia have a nice day!'</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Britney Spears\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 'hello and welcome to your profile Britney Spears have a nice day!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Another way to make this example is using template string, is the best way the easiest way to concatenate strings, in this case, we have the same function from latest example and we added each string as an expression with the syntax <code class=\"language-text\">${}</code> that will give us the same result as the latest examples.</p>\n<h3>PadStart()</h3>\n<p>Is a method that completes a string with another string until the string completes the established length. This method accepts as a first argument the length of the first <code class=\"language-text\">string</code> and the second argument is the <code class=\"language-text\">padString</code> that is the string with which one will be completed.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function formatTime(hour, minutes) {\n  const formattedHour = String(hour).padStart(2, &quot;0&quot;)\n  const formattedMinutes = String(minutes).padStart(2, &quot;0&quot;)\n\n  return \\`\\${formattedHour}:\\${formattedMinutes}\\`\n}\n\nconsole.log(formatTime(3, 15)) // console will print &quot;03:15&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hour<span class=\"token punctuation\">,</span> minutes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> formattedHour <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>hour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> formattedMinutes <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>formattedHour<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>formattedMinutes<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print \"03:15\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function that receives an hour and minutes, and we have to set an hour format, first, we set to hour the method <code class=\"language-text\">padStart</code> with the first argument number 2, that means that <code class=\"language-text\">hour</code> should have a 2 index length, then the string <code class=\"language-text\">0</code> that is the string with which will be completed the hour. We make the same with the minutes and have as a result 03:15 with an hour format.</p>\n<h3>PadEnd()</h3>\n<p>Is a method that completes a string with an established length, that will be applied at the end of the string and received as a first argument the established length of the string and as a second argument that is a string with which will be completed, returning a string as a result.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const str1 = &quot;Sour Candy&quot;\n\nconsole.log(str1.padEnd(25, &quot;!&quot;))\n// console will print 'Sour Candy!!!!!!!!!!!!!!!'\n\nconst str2 = &quot;Kill this love&quot;\n\nconsole.log(str2.padEnd(20))\n// console will print 'Kill this love`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Sour Candy\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// console will print 'Sour Candy!!!!!!!!!!!!!!!'</span>\n\n<span class=\"token keyword\">const</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Kill this love\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// console will print 'Kill this love</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In those examples we can see 2 <code class=\"language-text\">strings</code> the first received the length of 25 and the symbol <code class=\"language-text\">!</code> to complete until 25 in the index. In the second str2 we set 20 of length and we didn't put any string to complete, as a result, the method completes the string with space.</p>\n<h3>Match()</h3>\n<p>Is a method that recovers the result of matching a string against a regular expression.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let sample = &quot;Whitespace is important in separating words&quot;\nlet countWhiteSpace = /\\s/g\nlet result = sample.match(countWhiteSpace).length\nconsole.log(result) // console will print 5`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> sample <span class=\"token operator\">=</span> <span class=\"token string\">\"Whitespace is important in separating words\"</span>\n<span class=\"token keyword\">let</span> countWhiteSpace <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/g</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>countWhiteSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have the variable sample with a string and another variable with <code class=\"language-text\">regular expression</code>, that regular expression means that will match with any white space in the string, in the example, we used the method match in the string sample looking for all white space and using the length property will get how many spaces are in that string, in this case, there are 5.</p>\n<h3>Slice()</h3>\n<p>The method that extracts a section of a string and returns a new string, without modifying the original one. This method accepts 2 arguments, the first one is the begin Index that is the index where you need to start the slice and the second argument is the end Index that is the index where you need to finish the slice.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function hexToRgb(color) {\n  const r = Number.parseInt(color.slice(0, 2), 16)\n  const g = Number.parseInt(color.slice(2, 4), 16)\n  const b = Number.parseInt(color.slice(4, 6), 16)\n\n  return { r, g, b }\n}\n\nconsole.log(hexToRgb(&quot;FFAABB&quot;)) // console will print { r: 255, g: 170, b: 187 }`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hexToRgb</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">hexToRgb</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FFAABB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print { r: 255, g: 170, b: 187 }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We have the same example that we used for the parseInt method, but in this case, we are explaining how slice works, at first, we have a function that converts hexadecimal colors to RGB this function received the color as a string and we need to extract sections of the string to convert each part in the value of RGB color, our first variable <code class=\"language-text\">r</code>, has param color and we apply the slice method, the first argument is the index, in this case, we want to start with the beginning of the word and the second argument in the number of the index we are going to extract from the string in this case 2, having, as a result, something like this {FF, AA, BB} after this we apply the rest of the methods to obtain the RGB color.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const name = &quot;Meredith&quot;\nconsole.log(name.slice(0)) // wil print 'Meredith'\n\nconst name1 = &quot;Meredith&quot;\nconsole.log(name1.slice(3)) // wil print 'edith'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Meredith\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wil print 'Meredith'</span>\n\n<span class=\"token keyword\">const</span> name1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Meredith\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wil print 'edith'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we can see if we do not declare a second argument, it will extract the string from the <code class=\"language-text\">beginIndex</code> and return the rest of the string.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const cc = &quot;2222555544441111&quot;\nconst last4 = cc.slice(-4)\nconst maskecCc = last4.padStart(16, &quot;X&quot;)\n\nconsole.log(maskecCc) // console will print 'XXXXXXXXXXXX1111'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cc <span class=\"token operator\">=</span> <span class=\"token string\">\"2222555544441111\"</span>\n<span class=\"token keyword\">const</span> last4 <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> maskecCc <span class=\"token operator\">=</span> last4<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>maskecCc<span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print 'XXXXXXXXXXXX1111'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, when we use a negative index the behavior on this is that the begin index starts backward, in this example, we have credit card variable with a number in a string, we want just the latest 4 numbers from the string, in that case we apply the slice method with a beginning index of -4 and will return <code class=\"language-text\">1111</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const name2 = &quot;Meredith&quot;\nconsole.log(name2.slice(2, -4)) // console will print 're'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Meredith\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print 're'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>In this example, we can observe an end index as a negative and has the same behavior that they begin index, in this case, we extract with the begin index until <code class=\"language-text\">r</code> and then our end index with a negative value will be <code class=\"language-text\">e</code> because it will start backward from letter h to letter r, resulting the console will print \"re\"</p>\n<h3>Includes()</h3>\n<p>Is a method that determines whether one string may be found in another string, this returns true or false, this method accepts as argument one string, and the position of this string, the second one is optional.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const sentence =\n  &quot;Oops I did it again I played with your heart got lost in the game Oh baby baby Oops you think Im in love That Im sent from above Im not that innocent&quot;\n\nconst word = &quot;carlos&quot;\nconst word1 = &quot;baby&quot;\n\nconsole.log(\n  \\`The word &quot;\\${word1}&quot; \\${\n    sentence.includes(word1) ? &quot;is&quot; : &quot;is not&quot;\n  } in the sentence\\`\n) //true\nconsole.log(\n  \\`The word &quot;\\${word}&quot; \\${\n    sentence.includes(word) ? &quot;is&quot; : &quot;is not&quot;\n  } in the sentence\\`\n) // false\n\n// 'The word &quot;baby&quot; is in the sentence'\n// 'The word &quot;carlos&quot; is not in the sentence'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"Oops I did it again I played with your heart got lost in the game Oh baby baby Oops you think Im in love That Im sent from above Im not that innocent\"</span>\n\n<span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token string\">\"carlos\"</span>\n<span class=\"token keyword\">const</span> word1 <span class=\"token operator\">=</span> <span class=\"token string\">\"baby\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The word \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>word1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n    sentence<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>word1<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span>\n  <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in the sentence</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The word \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>word<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n    sentence<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"is\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"is not\"</span>\n  <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in the sentence</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// 'The word \"baby\" is in the sentence'</span>\n<span class=\"token comment\">// 'The word \"carlos\" is not in the sentence'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example we have a string with a chorus of a song, we apply to that string the <code class=\"language-text\">include()</code> method and the first word was <code class=\"language-text\">Carlos</code>, the first one return false value, so the console print that the word is not found it in the sentence and the second word <code class=\"language-text\">baby</code> returns a true value and the console print that the word was found in the sentence.</p>\n<h3>Split()</h3>\n<p>That method divides a <code class=\"language-text\">string</code> into a ordered set of substrings, puts these substring into an array, this method accepts as a first argument the separator (optional) this can be a string or a regular expression and the second argument is the limit (optional), that is a number no negative, that limit the number of pieces.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const str = &quot;this text is really looonggggg&quot;\n\nconsole.log(str.split(&quot; &quot;, 2)) //[ 'this', 'text' ]\n\nconst str1 = &quot;this text is really looonggggg&quot;\n\nconsole.log(str1.split(&quot;&quot;, 2)) // [ 't', 'h' ]`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"this text is really looonggggg\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[ 'this', 'text' ]</span>\n\n<span class=\"token keyword\">const</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"this text is really looonggggg\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [ 't', 'h' ]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example we have a string with text that we want to split, we apply the string method <code class=\"language-text\">split()</code> and declare as a first argument how we want to split the string, a string empty with space will be separate by words with a limit of two as our second argument declares, the second example we have the text, but this time we want to separate by letter, so we declare as a first argument an empty string with no space.</p>\n<p>For more information about string methods here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String</a></p>","excerpt":"String The string is used to represent and manipulate a sequence of characters, they are useful for holding data that can be represented in a text form. Strings…","frontmatter":{"title":"What are strings in javascript? and what are their most common methods?","description":null,"featuredImage":{"childImageSharp":{"fluid":{"src":"/static/76586db8cd06bb6f901d5924e59af2ff/ee604/strings.png"},"resize":{"src":"/static/76586db8cd06bb6f901d5924e59af2ff/f3583/strings.png","height":675,"width":1200}}}},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/blog/strings-and-methods/","langKey":"en"}}}