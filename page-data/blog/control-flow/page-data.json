{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/control-flow/","result":{"data":{"markdownRemark":{"html":"<h2>What are control flow statements?</h2>\n<p>Is the order that the instructions, statements or functions are executed.</p>\n<h3>Expression</h3>\n<p>Any unit of code that can be evaluated to a value is an expression.</p>\n<h3>Statement - If...Else</h3>\n<p>Executes a statement <code class=\"language-text\">if</code> a specified condition is truthy. If the condition is <code class=\"language-text\">falsy</code>, another statement can be executed.</p>\n<h4>Syntax</h4>\n<ol>\n<li>Condition is an expression that is considered to be <code class=\"language-text\">truthy</code> or <code class=\"language-text\">falsy</code>.</li>\n<li>Statement 1 is executed if the condition is <code class=\"language-text\">truthy</code>.</li>\n<li>Statement 2 is executed if the condition is <code class=\"language-text\">falsy</code>.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getAge(number) {\n  let result\n  if (number >= 18) {\n    result = &quot;Welcome young adult!&quot;\n  } else {\n    result = &quot;You are a kid!&quot;\n  }\n  return result\n}\n\nconsole.log(getAge(17)) // console print &quot;You are a kid!&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome young adult!\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"You are a kid!\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console print \"You are a kid!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function that receives as a <code class=\"language-text\">param</code> an age, our first condition will print <code class=\"language-text\">Welcome young adult!</code>, if it is evaluated as a <code class=\"language-text\">true</code>, in other words, if the <code class=\"language-text\">number</code> is greater or equal than number 18. If the condition is evaluated as a <code class=\"language-text\">false</code>, the console will print <code class=\"language-text\">&quot;You are a kid!&quot;</code>.</p>\n<h3>Nested if else statement</h3>\n<p>Multiple <code class=\"language-text\">if...else</code> statements can be nested to create an extra <code class=\"language-text\">else if</code> clause.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getAge(number) {\n  let age\n  if (number < 12) {\n    age = &quot;Just can watch movies with classification A&quot;\n  } else if (number <= 17) {\n    age = &quot;Just can watch movies with classification A and B&quot;\n  } else {\n    age = &quot;You can watch movies with classification A, B and C&quot;\n  }\n  return age\n}\n\nconsole.log(getAge(16)) // will print &quot;Just can watch movies with classification A and B&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> age\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    age <span class=\"token operator\">=</span> <span class=\"token string\">\"Just can watch movies with classification A\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    age <span class=\"token operator\">=</span> <span class=\"token string\">\"Just can watch movies with classification A and B\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    age <span class=\"token operator\">=</span> <span class=\"token string\">\"You can watch movies with classification A, B and C\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> age\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// will print \"Just can watch movies with classification A and B\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, the function received an age, and the <code class=\"language-text\">if</code> statement will evaluate the first declaration. If the age is less than 12 the console will print <code class=\"language-text\">” Just can watch movies with classification A”</code>, the next declaration is if the number is less or equal than 17 will print <code class=\"language-text\">&quot;Just can watch movies with classification A and B&quot;</code> and finally if the 2 last declarations are <code class=\"language-text\">false</code>, in other words, the age is a number greater or equal than 18 the console will print <code class=\"language-text\">&quot;You can watch movies with classification A, B, and C&quot;</code>.</p>\n<h3>Switch statement</h3>\n<p>The switch statement evaluates an expression matching the expression's value to a case clause, and executes statements with that case.</p>\n<h4>Syntax</h4>\n<ol>\n<li>Expression whose result is matched against each case clause.</li>\n<li>The case value N is used to match against expression, if the expression matches the specified value N, the statements inside the case are executed.</li>\n<li>Default case is provided and is executed if the value of expression doesn’t match any case.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getPhoneNumber(name) {\n  switch (name) {\n    case &quot;Lily&quot;:\n      console.log(&quot;0400581278&quot;)\n      break\n    case &quot;Marshall&quot;:\n      console.log(&quot;0400525877&quot;)\n      break\n    case &quot;Bartney&quot;:\n      console.log(&quot;21565646541&quot;)\n      break\n    case &quot;Ted&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    case &quot;Robin&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    default:\n      console.log(&quot;Error!&quot;)\n  }\n}\n\ngetPhoneNumber(&quot;Lily&quot;) //console will print '0400581278'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Lily\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400581278\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Marshall\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400525877\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bartney\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"21565646541\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Ted\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Robin\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//console will print '0400581278'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function that receives a name as a <code class=\"language-text\">param</code>, inside this function there is a <code class=\"language-text\">switch statement</code>, in this statement, in each case, there is a different name and the expression of each case is the name’s number phone. The name <code class=\"language-text\">Lily</code> will be compared with the value of each case, in this case, our name match with the first case and will print a number phone <code class=\"language-text\">&quot;0400581278&quot;</code>, if any of those cases didn't match with the name provided in the function, the default case will be executed and in this case, will print in the console <code class=\"language-text\">Error!</code></p>\n<h4>What happens if you don't declare a break in the switch?</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getPhoneNumber(name) {\n  switch (name) {\n    case &quot;Lily&quot;:\n      console.log(&quot;0400581278&quot;)\n\n    case &quot;Marshall&quot;:\n      console.log(&quot;0400525877&quot;)\n      break\n    case &quot;Bartney&quot;:\n      console.log(&quot;21565646541&quot;)\n      break\n    case &quot;Ted&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    case &quot;Robin&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    default:\n      console.log(&quot;Error!&quot;)\n  }\n}\n\ngetPhoneNumber(&quot;Lily&quot;) // console will print '0400581278'\n;(&quot;0400525877&quot;)`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Lily\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400581278\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Marshall\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400525877\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bartney\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"21565646541\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Ted\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Robin\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console will print '0400581278'</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400525877\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, I removed the first <code class=\"language-text\">break</code> on the <code class=\"language-text\">switch</code> and we can observe that the <code class=\"language-text\">loop</code> is still running until it finds the next <code class=\"language-text\">break</code>, this will print <code class=\"language-text\">Marshall</code> and lily’s numbers, this behavior happened because the <code class=\"language-text\">switch</code> statement needs a <code class=\"language-text\">break</code> declaration in each case, with that the <code class=\"language-text\">switch</code> will know which case will stop the loop.</p>\n<h3>While statement</h3>\n<p>The <code class=\"language-text\">while</code> statement creates a loop that executes a specified statement as a long as the test condition evaluates to <code class=\"language-text\">true</code>.</p>\n<h4>Syntax</h4>\n<ol>\n<li>Condition is an expression evaluated before each pass through the loop. If this condition evaluates to <code class=\"language-text\">true</code>, the statement is executed. When the condition evaluates to <code class=\"language-text\">false</code> will stop.</li>\n<li>Statement will be executed as long as the condition evaluates to <code class=\"language-text\">true</code>.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function addNumber(number) {\n  while (number < 10) {\n    number++\n  }\n  console.log(number) // print number 10\n}\n\naddNumber(0)`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// print number 10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function called <code class=\"language-text\">addNumber</code> that received a <code class=\"language-text\">param</code>, in this case, the number 0, inside this function there is a <code class=\"language-text\">while</code> that evaluated a condition that number is less than 10, <code class=\"language-text\">if</code> that condition is <code class=\"language-text\">true</code> it will be adding one to the number, this condition will be evaluated until be <code class=\"language-text\">false</code>, in this case until the number be 10.</p>\n<h3>The do...while statement</h3>\n<p>Creates a loop that executes a specified statement until the test condition evaluates to <code class=\"language-text\">false</code>. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</p>\n<h4>Syntax</h4>\n<ol>\n<li>Statement is executed at least once and is re-executed each time the condition evaluates to <code class=\"language-text\">true</code>.</li>\n<li>The condition is an expression evaluated after each pass through the loop, if condition evaluates to <code class=\"language-text\">true</code>, the statement is re-execute.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let number = 4\ndo {\n  number++\n} while (number < 3)\nconsole.log(number) // will print number 5`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  number<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// will print number 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this loop, we declared a variable with the <code class=\"language-text\">number</code> 4 and executed a statement where one will be added one to number until our condition will be less than the number 3. In this case, at first, our condition is <code class=\"language-text\">false</code> but do while will execute at least one time, and in the console will print number 5.</p>\n<h3>For statement</h3>\n<p>Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement to be executed in the loop.</p>\n<h4>Syntax</h4>\n<ol>\n<li>Initialization is an expression or variable declaration evaluated once before the loop begins.</li>\n<li>Condition is an expression to be evaluated before each loop iteration, if this expression evaluates to <code class=\"language-text\">true</code>, the statement is executed.</li>\n<li>Final expression to be evaluated at the end of each loop iteration. This will happen before the next evaluation of the condition.</li>\n<li>Statement is executed as long as the condition evaluates to <code class=\"language-text\">true</code>.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`for (let number = 0; number < 5; number++) {\n  console.log(number)\n  // will print 0 1 2 3 4\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> number <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> number<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// will print 0 1 2 3 4</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a <code class=\"language-text\">for</code> a statement where we declare the variable <code class=\"language-text\">number</code> equal to 0, after that, we declare a condition that <code class=\"language-text\">number</code> is less than 5 and finally the final expression to add one to <code class=\"language-text\">number</code> variable until the condition converts false.</p>\n<h3>The for...of statement</h3>\n<p>Creates a loop iterating over iterable objects and arrays.</p>\n<h4>Syntax</h4>\n<ol>\n<li>On each iteration a value of a different property is assigned to a variable.</li>\n<li>Object’s properties are iterated.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const arrNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor (const number of arrNumbers) {\n  console.log(number + 1) // the console will print 2 3 4 5 6 7 8 9 10 11\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> number <span class=\"token keyword\">of</span> arrNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the console will print 2 3 4 5 6 7 8 9 10 11</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have an array of numbers and in our for, we declare the variable <code class=\"language-text\">const number</code> that is where is going to be saved every array’s number and then we declared our array of numbers <code class=\"language-text\">arrNumbers</code>, in our loop, we add the number one to each number of the array, the result of this in the console is every number of the array plus one.</p>\n<h3>The for...in statement</h3>\n<p>Iterates over all enumerable properties of an object that are keyed by strings.</p>\n<h4>Syntax</h4>\n<ol>\n<li>A different name is assigned to a variable on each iteration.</li>\n<li>Objects whose enumerable properties are iterated over.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let friends = {\n  Monica: 25,\n  Chandler: 30,\n  Rachel: 25,\n  Ross: 24,\n  Joy: 28\n};\n\nfor (let name in friends) {\n  console.log(\\`\\${name} will be \\${friends[name] + 1} years old\\`);\n}\n\nThe console will print\n// 'Monica will be26 years old'\n// 'Chandler will be31 years old'\n// 'Rachel will be26 years old'\n// 'Ross will be25 years old'\n// 'Joy will be29 years old'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Monica<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  Chandler<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  Rachel<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  Ross<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>\n  Joy<span class=\"token operator\">:</span> <span class=\"token number\">28</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> friends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> will be </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>friends<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nThe console will print\n<span class=\"token comment\">// 'Monica will be26 years old'</span>\n<span class=\"token comment\">// 'Chandler will be31 years old'</span>\n<span class=\"token comment\">// 'Rachel will be26 years old'</span>\n<span class=\"token comment\">// 'Ross will be25 years old'</span>\n<span class=\"token comment\">// 'Joy will be29 years old'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a for where we are iterating of friends object, with the name of people with their ages (values), we add one to each age of the friends’ object and the same phrase to all, first, we declare name as the property in our object plus the phrase <code class=\"language-text\">will be</code>, then we add our property’s value having access as <code class=\"language-text\">friends[name]</code> , and finally, we add the phrase <code class=\"language-text\">years old</code>.</p>\n<h4>Why not use an array in a for… in?</h4>\n<p>Array indexes are just enumerable properties with integer names and are otherwise identical to general object properties. There is no guarantee that <code class=\"language-text\">for...in</code> will return the indexes in any particular order.</p>","excerpt":"What are control flow statements? Is the order that the instructions, statements or functions are executed. Expression Any unit of code that can be evaluated to…","frontmatter":{"title":"What are the control flow statements? and how to use them in javascript?","description":null,"featuredImage":{"childImageSharp":{"fluid":{"src":"/static/642f07a5034650c5162ca1257a8c051f/ee604/loops.png"},"resize":{"src":"/static/642f07a5034650c5162ca1257a8c051f/f3583/loops.png","height":675,"width":1200}}}},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/blog/control-flow/","langKey":"en"}}}