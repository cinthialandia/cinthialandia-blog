{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/this/","result":{"data":{"markdownRemark":{"html":"<h2>What is this?</h2>\n<p>A functionâ€™s this references the execution context for that call, determined entirely by how the function was called. In other words, that this keyword assignment, if you look at a function that has a keyword in it, it is assigned based upon how the function is called.</p>\n<h2>Rules</h2>\n<h3>Default Binding</h3>\n<p>The first rule we will examine comes from the most common case of function calls: standalone function invocation. Think of this rule as the default catch-all rule when none of the other rules apply.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function foo() {\n  console.log(this.a)\n}\nvar a = 2\n\nfoo() // 2 or type error`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 or type error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Strict mode</h4>\n<p>This will be always undefined</p>\n<h4>No strict mode</h4>\n<p>This will be global scope.</p>\n<h3>Implicit Binding</h3>\n<p>Implicit binding occurs when dot notation is used to invoke a function. whatever is to the left of the dot becomes the context for <code class=\"language-text\">this</code> in the function.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function Foo() {\n  console.log(&quot;Foo&quot;, this.a)\n}\n\nvar obj = {\n  a: 2,\n  foo: Foo,\n}\n\n// WITH FUNCTION OUTSIDE\n// deconstructing for easier access?\nvar { foo } = obj\n\n// nope, won't work.\n// foo is not executed as a method so no implicit this\nfoo() //TypeError: Cannot read property 'a' of undefined\n\n//this will work\nobj.foo() // 'Foo' 2`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// WITH FUNCTION OUTSIDE</span>\n<span class=\"token comment\">// deconstructing for easier access?</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\n\n<span class=\"token comment\">// nope, won't work.</span>\n<span class=\"token comment\">// foo is not executed as a method so no implicit this</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//TypeError: Cannot read property 'a' of undefined</span>\n\n<span class=\"token comment\">//this will work</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Foo' 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have the function <code class=\"language-text\">foo()</code> that prints a console.log with the word <code class=\"language-text\">Foo</code> and the instance of <code class=\"language-text\">a</code> that is declared outside of the object. Then we declared an object with the properties <code class=\"language-text\">a</code> and a <code class=\"language-text\">foo</code> with the method foo. After that, we have a deconstruction of <code class=\"language-text\">foo</code> with the execution of <code class=\"language-text\">foo</code> and finally the execution of <code class=\"language-text\">obj.bar</code>.\nAs we can see, in the first call we have an error and this happens because the function is executed as \"stand alone\", so the default rule kicks in. In the second execution, since the function is executed as a method of the object, the value of <code class=\"language-text\">this</code> will be the object itself.</p>\n<p>Let's take a look at a second example:</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`var obj = {\n  a: 2,\n  bar() {\n    console.log(&quot;bar&quot;, this.a) // &quot;bar&quot; 2\n  },\n}\n\n// WITH FUNCTION DECLARED INSIDE OBJECT\n// it should work now, right?\n// bar is declared inside the object...\nvar { bar } = obj\n\n// still no!\nbar() // TypeError: Cannot read property 'a' of undefined\n// it doesn't matter where it was declared\n\n// but HOW it was EXECUTED\nobj.bar() //'bar' 2\n// Implicit binding:\n// if a function is EXECUTED as a method of\n// an object, THIS will be the object.`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bar\" 2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// WITH FUNCTION DECLARED INSIDE OBJECT</span>\n<span class=\"token comment\">// it should work now, right?</span>\n<span class=\"token comment\">// bar is declared inside the object...</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\n\n<span class=\"token comment\">// still no!</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot read property 'a' of undefined</span>\n<span class=\"token comment\">// it doesn't matter where it was declared</span>\n\n<span class=\"token comment\">// but HOW it was EXECUTED</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'bar' 2</span>\n<span class=\"token comment\">// Implicit binding:</span>\n<span class=\"token comment\">// if a function is EXECUTED as a method of</span>\n<span class=\"token comment\">// an object, THIS will be the object.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So as you can see, even if we declare the function as a method of <code class=\"language-text\">obj</code>, when we deconstruct it and execute it, the default rule will be applied. But the second call works because we are calling the function as a method from the object as the rule said, with this example, we have clear that the result will depend on how you call the function, not how it was declared. It doesn't matter if the function is declared inside or outside the object, it depends on how we call the function.</p>\n<h3>Explicit Binding</h3>\n<p>Explicit binding of this occurs when <code class=\"language-text\">.call()</code>, <code class=\"language-text\">.apply()</code>, or <code class=\"language-text\">.bind()</code> are used on a function. We call these explicit because you are explicitly passing in this context to call() or apply(). Weâ€™ll talk about bind() in just a moment.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function foo() {\n  console.log(this.a)\n}\n\nvar obj = {\n  a: 2,\n}\n\nfoo.call(obj) // 2`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example we are Invoking <code class=\"language-text\">foo</code> with explicit binding by <code class=\"language-text\">foo.call(..)</code> that allows us to force this to be <code class=\"language-text\">obj</code>, having as a result <code class=\"language-text\">2</code></p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getBrand() {\n  console.log(this.brand)\n}\n\ngetBrand() // type error: cannot read property brand of undefined\n\nconst ferrariBrand = getBrand.bind({ brand: &quot;ferrari&quot; })\n\nferrariBrand() // ferrari`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// type error: cannot read property brand of undefined</span>\n\n<span class=\"token keyword\">const</span> ferrariBrand <span class=\"token operator\">=</span> <span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"ferrari\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">ferrariBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ferrari</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, we have a function <code class=\"language-text\">getBrand()</code> that has a console that prints <code class=\"language-text\">this.brand</code>, first, we call the function and have an error, why does this happen? Because the first rule, in strict mode the value of this is undefined. Then there is a declaration <code class=\"language-text\">ferrariBrand</code> where we set a value with the keyword <code class=\"language-text\">bind</code> to the brand, in this case, <code class=\"language-text\">ferrari</code> so when we call <code class=\"language-text\">ferrariBrand</code>, in the console print <code class=\"language-text\">ferrari</code>, in this case, we don't have an error because we are setting with bind the value of <code class=\"language-text\">this</code> on that variable.</p>\n<h3>New Binding</h3>\n<p>In JavaScript, we have the <code class=\"language-text\">new</code> operator that is the 4 rule of the <code class=\"language-text\">this</code>, the constructor in classes in JavaScript are just functions that are called with the keyword <code class=\"language-text\">this</code> when the function is called the following events happen.</p>\n<ol>\n<li>A new object is created.</li>\n<li>The new constructed object is linked (prototype)</li>\n<li>The new constructed object is set in <code class=\"language-text\">this</code> binding for the function called.</li>\n<li>It returns the instance of the created object.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function Car(brand) {\n  this.brand = brand\n}\n\nCar.prototype.start = function () {\n  console.log(\\`Starting car of brand \\${this.brand}...\\`)\n}\n\nconst huracan = new Car(&quot;lamborghini&quot;)\nconst veyron = new Car(&quot;bugatti&quot;)\n\n// .start belongs to Car, but THIS is different for each object\nhuracan.start() // 'Starting car of brand lamborghini...'\nveyron.start() // 'Starting car of brand bugatti...'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Starting car of brand </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> huracan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamborghini\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> veyron <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bugatti\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// .start belongs to Car, but THIS is different for each object</span>\nhuracan<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Starting car of brand lamborghini...'</span>\nveyron<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Starting car of brand bugatti...'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, the function car has the property <code class=\"language-text\">brand</code>, and the method starts, which is a function with a console that prints a text.\nWe created 2 instances of car, the first one is <code class=\"language-text\">huracan</code> with the brand <code class=\"language-text\">lamborghini</code> and the second one with the brand <code class=\"language-text\">bugatti</code>, both new instances have a different brand but the same method with a different <code class=\"language-text\">this</code>.</p>\n<h2>References</h2>\n<ul>\n<li>You Don't Know JS: this &#x26; Object Prototypes: Book by Kyle Simpson</li>\n</ul>","excerpt":"What is this? A functionâ€™s this references the execution context for that call, determined entirely by how the function was called. In other words, that thisâ€¦","frontmatter":{"title":"What is this in javascript? and what are their rules?","description":null,"featuredImage":{"childImageSharp":{"fluid":{"src":"/static/8e4e49aabea6599ca9ba0426765e38ff/ee604/this.png"},"resize":{"src":"/static/8e4e49aabea6599ca9ba0426765e38ff/f3583/this.png","height":675,"width":1200}}}},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/blog/this/","langKey":"en"}}}