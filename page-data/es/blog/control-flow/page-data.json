{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/blog/control-flow/","result":{"data":{"markdownRemark":{"html":"<h2>¿Que son los control flow statements?</h2>\n<p>Es el orden de instrucciones en el cual una declaración o función es ejecutada.</p>\n<h3>Expresión</h3>\n<p>Cualquier unidad de código que pueda ser evaluada es una expresión.</p>\n<h3>Statement - If...Else</h3>\n<p>Ejecuta una declaración <code class=\"language-text\">if</code> a una condición especifica si esta es <code class=\"language-text\">true</code>. Si la condición es <code class=\"language-text\">false</code>, otra declaración será ejecutada.</p>\n<h4>Sintaxis</h4>\n<ol>\n<li>La condición es una expresión que va a ser considerada <code class=\"language-text\">true</code> o <code class=\"language-text\">false</code> .</li>\n<li>La primera declaración es ejecutada si es <code class=\"language-text\">true</code> .</li>\n<li>La segunda declaración es ejecutada si la condición es <code class=\"language-text\">false</code>.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function obtenerEdad(numero) {\n  let resultado\n  if (numero >= 18) {\n    resultado = &quot;Bienvenido joven adulto!&quot;\n  } else {\n    resultado = &quot;Eres un niño!&quot;\n  }\n  return resultado\n}\n\nconsole.log(obtenerEdad(17)) // console print &quot;Eres un niño!&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">obtenerEdad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> resultado\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numero <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Bienvenido joven adulto!\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Eres un niño!\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> resultado\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obtenerEdad</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console print \"Eres un niño!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo tenemos una función que recibe como parámetro una edad, nuestra primera condición imprimirá <code class=\"language-text\">&quot;Bienvenido eres un joven adulto&quot;</code>, si es evaluada <code class=\"language-text\">true</code> es decir número es mayor o igual a 18, de lo contrario imprimirá <code class=\"language-text\">&quot;Eres un niño&quot;</code> si esta es evaluada como <code class=\"language-text\">false</code>.</p>\n<h3>Nested if else statement</h3>\n<p>Múltiples declaraciones <code class=\"language-text\">if ...else</code> pueden ser anidadas para crear un bloque de condición extra.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function obtenerEdad(numero) {\n  let resultado\n  if (numero < 12) {\n    resultado = &quot;Puedes ver solo películas clasificación A&quot;\n  } else if (numero <= 17) {\n    resultado = &quot;Puedes ver solo películas clasificación A y B&quot;\n  } else {\n    resultado = &quot;Puedes ver peliculas clasificación A, B y C &quot;\n  }\n  return resultado\n}\n\nconsole.log(obtenerEdad(9)) //  imprimira &quot;Puedes ver solo películas clasificación A&quot;`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">obtenerEdad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> resultado\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numero <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Puedes ver solo películas clasificación A\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numero <span class=\"token operator\">&lt;=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Puedes ver solo películas clasificación A y B\"</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Puedes ver peliculas clasificación A, B y C \"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> resultado\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">obtenerEdad</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  imprimira \"Puedes ver solo películas clasificación A\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, la función recibe una edad, nuestra primera declaración, evalúa si la edad es menor a 12, de ser así, la consola imprimirá <code class=\"language-text\">”Puedes ver solo películas de clasificación A”</code>, la próxima declaración es si número es menor o igual al número 17, si esta declaración es <code class=\"language-text\">true</code>, imprimirá <code class=\"language-text\">&quot;Puedes ver solo películas clasificación A y B&quot;</code>, finalmente todo número mayor a 18 imprimirá en la consola <code class=\"language-text\">&quot;Puedes ver peliculas clasificación A, B y C&quot;</code>.</p>\n<h3>Switch statement</h3>\n<p>El switch statement evalúa una expresión que coincida con el valor de la expresión del caso y ejecuta una declaración asociada al mismo.</p>\n<h4>Sintaxis</h4>\n<ol>\n<li>La expresión es aquel resultado que se compara con cada caso</li>\n<li>El caso value N es usado para comparar la expresión con los casos, si uno coincide, se ejecuta la declaración dentro del caso.</li>\n<li>Default case se ejecuta cuando el valor de la expresión no coincide con ningún caso.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function obtenerNumeroTelefonico(nombre) {\n  switch (nombre) {\n    case &quot;Lily&quot;:\n      console.log(&quot;0400581278&quot;)\n      break\n    case &quot;Marshall&quot;:\n      console.log(&quot;0400525877&quot;)\n      break\n    case &quot;Bartney&quot;:\n      console.log(&quot;21565646541&quot;)\n      break\n    case &quot;Ted&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    case &quot;Robin&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    default:\n      console.log(&quot;Error!&quot;) //console imprimira  '0400581278'\n  }\n}\n\nobtenerNumeroTelefonico(&quot;Lily&quot;)`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">obtenerNumeroTelefonico</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nombre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Lily\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400581278\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Marshall\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400525877\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bartney\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"21565646541\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Ted\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Robin\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//console imprimira  '0400581278'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">obtenerNumeroTelefonico</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos una función que recibe un nombre como parámetro, el cual tiene un <code class=\"language-text\">switch statement</code>, el cual tiene en cada caso tiene un nombre y su expresión es el numero de telefono de ese nombre. El nombre <code class=\"language-text\">Lily</code>, se comparará con el valor de cada caso, en este caso, nuestro valor coincide con el primer caso e imprime en consola el el numero de telefono <code class=\"language-text\">&quot;0400581278&quot;</code>, si este no coincidiera con ningún caso, se ejecutaría el <code class=\"language-text\">default</code> caso imprimiria en consola <code class=\"language-text\">Error!</code>.</p>\n<h4>¿Que pasa si no declaras la palabra <code class=\"language-text\">break</code> en el switch?</h4>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function obtenerNumeroTelefonico(nombre) {\n  switch (nombre) {\n    case &quot;Lily&quot;:\n      console.log(&quot;0400581278&quot;)\n    case &quot;Marshall&quot;:\n      console.log(&quot;0400525877&quot;)\n      break\n    case &quot;Bartney&quot;:\n      console.log(&quot;21565646541&quot;)\n      break\n    case &quot;Ted&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    case &quot;Robin&quot;:\n      console.log(&quot;548456156156&quot;)\n      break\n    default:\n      console.log(&quot;Error!&quot;)\n  }\n}\nobtenerNumeroTelefonico(&quot;Lily&quot;) // consola imprimira '0400581278' y '0400525877'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">obtenerNumeroTelefonico</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nombre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>nombre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Lily\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400581278\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Marshall\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0400525877\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Bartney\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"21565646541\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Ted\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Robin\"</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"548456156156\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">obtenerNumeroTelefonico</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lily\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// consola imprimira '0400581278' y '0400525877'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, removemos el primer <code class=\"language-text\">break</code> del <code class=\"language-text\">switch</code> y podemos observar, como este bucle sigue corriendo hasta que se encuentra con un declaración de <code class=\"language-text\">break</code>, imprimiendo en consola los números de teléfono tanto de <code class=\"language-text\">lily</code> como de <code class=\"language-text\">marshall</code>, este comportamiento pasa porque el <code class=\"language-text\">switch</code> necesita la declaración <code class=\"language-text\">break</code> en cada caso, para que él mismo sepa dónde debe detenerse en el bucle.</p>\n<h3>While statement</h3>\n<p>El while statement crea un loop que ejecuta una declaración hasta que la condición deje de ser true.</p>\n<h4>Sintasis</h4>\n<ol>\n<li>Condición es una expresión evaluada antes de casa paso por el loop, si la condición se evalúa <code class=\"language-text\">true</code>, la declaración es ejecutada, cuando la ejecución es evaluada <code class=\"language-text\">false</code> se detendrá.</li>\n<li>Statement será ejecutada hasta que la condición sea evaluada <code class=\"language-text\">false</code>.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function sumarNumero(numero) {\n  while (numero < 10) {\n    numero++\n  }\n  console.log(numero) // imprimira numero 10\n}\n\nsumarNumero(0)`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumarNumero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>numero <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    numero<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numero<span class=\"token punctuation\">)</span> <span class=\"token comment\">// imprimira numero 10</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sumarNumero</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos una función llamada <code class=\"language-text\">sumarNumero</code> que recibe un parámetro, en este caso el número 0, dentro de la misma se encuentra un <code class=\"language-text\">while</code> el cual evalúa una condición que número sea menor a 10, si la condición es <code class=\"language-text\">true</code> sumará uno a número, esta condición se evaluará hasta que sea falsa, en este caso, hasta que numero sea 10.</p>\n<h3>The do...while statement</h3>\n<p>Crea un loop que ejecuta una declaración hasta que la condición se evalúa falsa. La condición es evaluada después de ejecutar la declaración, resultando la declaración ejecutada aunque sea una vez.</p>\n<h4>Sintasis</h4>\n<ol>\n<li>La declaración es ejecutada al menos una vez, y es re ejecutada cada vez que la condición se evalúe como verdadera.</li>\n<li>La condición es una expresión evaluada después de cada paso de ciclo en el loop, si la condición es evaluada verdadera la declaración será ejecutada de nuevo.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let numero = 4\ndo {\n  numero++\n} while (numero < 3)\nconsole.log(numero) // imprime numero 5`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  numero<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>numero <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numero<span class=\"token punctuation\">)</span> <span class=\"token comment\">// imprime numero 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este loop, declaramos una variable con valor número 4, y ejecutamos una declaración donde número se le sumará uno hasta que en nuestra condición número sea menor a 3. En este caso, así nuestra condición sea falsa, correrá una sola vez, y nuestra consola imprimirá el número 5.</p>\n<h3>For statement</h3>\n<p>Crea un loop que consiste en 3 expresiones opcionales que están dentro de paréntesis y separadas por punto y coma, seguido de esto una bloque de código que será ejecutada en el loop.</p>\n<h4>Sintaxis</h4>\n<ol>\n<li>Inicialización es una expresión o la declaración de una variable que será evaluada antes de que el loop comience.</li>\n<li>La condición es una expresión que será evaluada antes de cada iteración del loop, si esta expresión es true, la declaración será efectuada.</li>\n<li>La expresión final será evaluada al final de cada iteración del loop, esto pasará antes de la próxima evaluación de la condición.</li>\n<li>La declaración será ejecutada hasta que se evalúe falsa.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`for (let numero = 0; numero < 5; numero++) {\n  console.log(numero)\n  // la consola imprima 0 1 2 3 4\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> numero <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> numero<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numero<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// la consola imprima 0 1 2 3 4</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos un <code class=\"language-text\">for</code> donde declaramos <code class=\"language-text\">number</code> como variable con valor 0, luego tenemos una condición donde <code class=\"language-text\">number</code> es menos que 5 y finalmente la expresión final donde sumamos uno a la variable <code class=\"language-text\">number</code> hasta que la condición sea <code class=\"language-text\">false</code>.</p>\n<h3>The for...of statement</h3>\n<p>Crea un loop iterable sobre objetos y arrays.</p>\n<h4>Sintaxis</h4>\n<ol>\n<li>En cada iteración un valor de diferente propiedad es asignado a la variable.</li>\n<li>Las propiedades del objeto son iteradas.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`const arrNumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor (const numero of arrNumeros) {\n  console.log(numero + 1) // La consola imprimirá 2 3 4 5 6 7 8 9 10 11\n}`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrNumeros <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> numero <span class=\"token keyword\">of</span> arrNumeros<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numero <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// La consola imprimirá 2 3 4 5 6 7 8 9 10 11</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos un <code class=\"language-text\">array</code> de números y en nuestro for declaramos la variable <code class=\"language-text\">const numero</code> que es donde será guardada en la iteración cada número del array, y declaramos nuestro array <code class=\"language-text\">arrNumeros</code>, y en nuestro loop, le sumamos el número uno a cada número de nuestro array, dando como resultado en la consola cada número sumado más uno.</p>\n<h3>The for...in statement</h3>\n<p>Itera sobre todas las propiedades de un objeto.</p>\n<h4>Sintaxis</h4>\n<ol>\n<li>Un nombre distinto se le es asignado a la variable en cada iteración.</li>\n<li>Las propiedades del objeto las cuales serán iteradas.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`let friends = {\n  Monica: 25,\n  Chandler: 30,\n  Rachel: 25,\n  Ross: 24,\n  Joy: 28,\n}\n\nfor (let nombre in friends) {\n  console.log(\\`\\${nombre} cumplirá \\${friends[nombre] + 1}  años\\`)\n}\n\n// 'Monica cumplirá 26  años'\n// 'Chandler cumplirá 31  años'\n// 'Rachel cumplirá 26  años'\n// 'Ross cumplirá 25  años'\n// 'Joy cumplirá 29  años'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Monica<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  Chandler<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  Rachel<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  Ross<span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>\n  Joy<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> nombre <span class=\"token keyword\">in</span> friends<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nombre<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> cumplirá </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>friends<span class=\"token punctuation\">[</span>nombre<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">  años</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 'Monica cumplirá 26  años'</span>\n<span class=\"token comment\">// 'Chandler cumplirá 31  años'</span>\n<span class=\"token comment\">// 'Rachel cumplirá 26  años'</span>\n<span class=\"token comment\">// 'Ross cumplirá 25  años'</span>\n<span class=\"token comment\">// 'Joy cumplirá 29  años'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos un <code class=\"language-text\">for in</code>, donde estamos iterando sobre un objeto, con los nombres de personas y sus edades (valores), agregamos uno a las edades del objeto y la misma frase a todos, primero declaramos nombre, que es la propiedad de nuestro objeto más la concatenación de la palabra tiene, luego concatenamos nuestro valor de la propiedad accediendo a ella, <code class=\"language-text\">friends[nombre]</code>, y adicionamos la palabra años.</p>\n<h4>¿Por que no es bueno usar un for… in en un array?</h4>\n<p>Los índices de los arrays son innumerables propiedades con nombres integrales, no hay garantía que un <code class=\"language-text\">for… in</code> retornara esos índices en algún orden en particular.</p>","excerpt":"¿Que son los control flow statements? Es el orden de instrucciones en el cual una declaración o función es ejecutada. Expresión Cualquier unidad de código que…","frontmatter":{"title":"¿Qué son los control flow statements (bucles) en javascript? y como se utilizan?","description":null,"featuredImage":{"childImageSharp":{"fluid":{"src":"/static/0a6e83aa0169f10999e3ccbe0fd1a888/ee604/loops-es.png"},"resize":{"src":"/static/0a6e83aa0169f10999e3ccbe0fd1a888/f3583/loops-es.png","height":675,"width":1200}}}},"fields":{"langKey":"es"}}},"pageContext":{"slug":"/es/blog/control-flow/","langKey":"es"}}}