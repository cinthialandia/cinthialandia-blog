{"componentChunkName":"component---src-templates-blog-post-js","path":"/es/blog/this/","result":{"data":{"markdownRemark":{"html":"<h2>¿Que es this?</h2>\n<p>Es la referencia de <code class=\"language-text\">this</code> cuándo una función es llamada, y es determinada completamente en como es llamada dicha función.</p>\n<h2>Reglas</h2>\n<h3>Por defecto Binding</h3>\n<p>La primera regla y esta es ejecutada cuando se llama una función y por defecto aplican ninguna de las reglas anteriores.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function foo() {\n  console.log(this.a)\n}\nvar a = 2\n\nfoo() // 2 or type error`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 or type error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>Modo estricto</h4>\n<p>Si estamos programando en modo estricto(lo más común hoy en día) al momento de llamar la función, el valor de <code class=\"language-text\">this</code> sera undefined como podemos ver en el ejercicio.</p>\n<h4>No modo estricto</h4>\n<p>Si estamos programado en no modo estricto (cosa que ya no es común hoy en día) al momento de llamar la función, el valor de this sera el scope global en el caso del ejercicio el valor de 2.</p>\n<h3>Implicit Binding</h3>\n<p>El implicit binding ocurre cuando el punto es usado para invocar una función, todo lo que esté a la izquierda del punto se convierte en el contexto de <code class=\"language-text\">this</code> en la función.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function Foo() {\n  console.log(&quot;Foo&quot;, this.a)\n}\n\nvar obj = {\n  a: 2,\n  foo: Foo,\n}\n\n// Con la funciona afuera?\n// Deconstrucción para un mejor acceso?\nvar { foo } = obj\n\n// No no funciona.\n// foo no es ejecutado como método, entonces no es un implicit \\`this\\`\n\nfoo() //TypeError: Cannot read property 'a' of undefined\n\n//Esto si funciona.\nobj.foo() // 'Foo' 2`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Con la funciona afuera?</span>\n<span class=\"token comment\">// Deconstrucción para un mejor acceso?</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\n\n<span class=\"token comment\">// No no funciona.</span>\n<span class=\"token comment\">// foo no es ejecutado como método, entonces no es un implicit `this`</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//TypeError: Cannot read property 'a' of undefined</span>\n\n<span class=\"token comment\">//Esto si funciona.</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Foo' 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, tenemos la función <code class=\"language-text\">foo()</code> que imprime un console.log con la palabra <code class=\"language-text\">Foo</code> y la instancia de <code class=\"language-text\">a</code> que es declarada fuera del objeto. Luego declaramos un objeto con las propiedades <code class=\"language-text\">a</code> y <code class=\"language-text\">foo</code> con el método <code class=\"language-text\">foo</code>. Declarado todo esto tenemos una desconstrucción de <code class=\"language-text\">foo</code> con la ejecución del mismo y finalmente la ejecucion de <code class=\"language-text\">obj.bar</code>.</p>\n<p>Como podemos ver, en este primer ejemplo la llamada da como resultado un error, y esto pasa porque la función se ejecuta como <code class=\"language-text\">stand alone</code>, en este ejemplo la regla por defecto es aplicada. En la segunda ejecución, como la función es ejecutada como método del objeto, el valor de <code class=\"language-text\">this</code> va a ser el mismo objeto.</p>\n<p>Veamos el segundo ejemplo</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`var obj = {\n  a: 2,\n  bar() {\n    console.log(&quot;bar&quot;, this.a) // &quot;bar&quot; 2\n  },\n}\n\n// con la función declara dentro del objeto\n// debería de funcionar? i\n// bar es declara dentro del objeto\nvar { bar } = obj\n\n// aun no funciona!\nbar() // TypeError: Cannot read property 'a' of undefined\n//Porque no importa donde fue declarada\n\n//Si no cómo es ejecutada\nobj.bar() //'bar' 2\n// Implicit binding:\n// si la función es declarada como método del objeto\n// THIS sera el objeto`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bar\" 2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// con la función declara dentro del objeto</span>\n<span class=\"token comment\">// debería de funcionar? i</span>\n<span class=\"token comment\">// bar es declara dentro del objeto</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj\n\n<span class=\"token comment\">// aun no funciona!</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot read property 'a' of undefined</span>\n<span class=\"token comment\">//Porque no importa donde fue declarada</span>\n\n<span class=\"token comment\">//Si no cómo es ejecutada</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//'bar' 2</span>\n<span class=\"token comment\">// Implicit binding:</span>\n<span class=\"token comment\">// si la función es declarada como método del objeto</span>\n<span class=\"token comment\">// THIS sera el objeto</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Como podemos observar, así declaremos la función como método del objeto, cuando hacemos la deconstrucción y la ejecutamos la regla por defecto será aplicada, pero en la segunda llamada si funcionara porque estamos llamado la función como método del objeto con este ejemplo tenemos claro que el resultado dependerá en cómo llamamos a la función y no en como es declarada. No importa si esta es declarada dentro o fuera del objeto si no de donde es llamada.</p>\n<h3>Explicit Binding</h3>\n<p>Esta regla es aplicada cuando usamos en las funciones la palabra clave <code class=\"language-text\">.call()</code>, <code class=\"language-text\">.apply()</code>, o <code class=\"language-text\">.bind()</code>.\nPodemos decir que es explícito porque explícitamente pasamos cuál será el contexto de <code class=\"language-text\">this</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function foo() {\n  console.log(this.a)\n}\n\nvar obj = {\n  a: 2,\n}\n\nfoo.call(obj) // 2`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo estamos invocando <code class=\"language-text\">foo</code> con un explicit binding en <code class=\"language-text\">foo.call(..)</code>y nos permite forzar el <code class=\"language-text\">this</code> del obj, teniendo como resultado <code class=\"language-text\">2</code>.</p>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function getBrand() {\n  console.log(this.brand)\n}\n\ngetBrand() // type error: cannot read property brand of undefined\n\nconst ferrariBrand = getBrand.bind({ brand: &quot;ferrari&quot; })\n\nferrariBrand() // ferrari`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// type error: cannot read property brand of undefined</span>\n\n<span class=\"token keyword\">const</span> ferrariBrand <span class=\"token operator\">=</span> <span class=\"token function\">getBrand</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"ferrari\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">ferrariBrand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ferrari</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo tenemos la función <code class=\"language-text\">getBrand()</code> que imprime en consola <code class=\"language-text\">this.brand</code>, primero llamamos la función y esta nos da como resultado un error, ¿por que pasa esto? Y es porque se aplica la primera regla en modo estricto el valor es <code class=\"language-text\">undefined</code>. Luego tenemos la declaración de <code class=\"language-text\">ferrariBrand</code> donde le asignamos el valor con la palabra <code class=\"language-text\">bind</code> a la marca, en este caso <code class=\"language-text\">ferrari</code>, cuando llamemos esta variable, la consola imprimirá <code class=\"language-text\">ferrari</code>. ¿por que en este caso no tenemos el error anterior? Y es porque con la palabra bind obligamos a asignarle un valor a <code class=\"language-text\">this</code>.</p>\n<h3>New Binding</h3>\n<p>En javascript tenemos el operador <code class=\"language-text\">new</code> es la cuarta regla del <code class=\"language-text\">this</code>, el constructor de las clases en Js son solo funciones que son llamadas con la palabra <code class=\"language-text\">this</code>, cuando la función es llamada pasan los siguientes eventos.</p>\n<ol>\n<li>Un objeto nuevo es creado.</li>\n<li>El prototype del nuevo objeto es conectado al objeto de la función constructora.</li>\n<li>El contexto <code class=\"language-text\">this</code> es creado e inicializado para el nuevo objeto</li>\n<li>Regresa una referencia a la instancia del objeto creado.</li>\n</ol>\n<div\n              class=\"gatsby-code-button-container\"\n              data-toaster-id=\"\"\n              data-toaster-class=\"gatsby-code-button-toaster\"\n              data-toaster-text-class=\"gatsby-code-button-toaster-text\"\n              data-toaster-text=\"\"\n              data-toaster-duration=\"3500\"\n              onClick=\"copyToClipboard(`function Car(brand) {\n  this.brand = brand\n}\n\nCar.prototype.start = function () {\n  console.log(\\`Starting car of brand \\${this.brand}...\\`)\n}\n\nconst huracan = new Car(&quot;lamborghini&quot;)\nconst veyron = new Car(&quot;bugatti&quot;)\n\n// .start belongs to Car, but THIS is different for each object\nhuracan.start() // 'Starting car of brand lamborghini...'\nveyron.start() // 'Starting car of brand bugatti...'`, ``)\"\n            >\n              <div\n                class=\"gatsby-code-button\"\n                data-tooltip=\"\"\n              >\n                Copy<svg class=\"gatsby-code-button-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 1H2v16h2V3h12V1zm-1 4l6 6v12H6V5h9zm-1 7h5.5L14 6.5V12z\"/></svg>\n              </div>\n            </div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Starting car of brand </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> huracan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamborghini\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> veyron <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bugatti\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// .start belongs to Car, but THIS is different for each object</span>\nhuracan<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Starting car of brand lamborghini...'</span>\nveyron<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Starting car of brand bugatti...'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>En este ejemplo, la función car tiene la propiedad <code class=\"language-text\">brand</code> y el método <code class=\"language-text\">starts</code> que es una función que imprime en la consola un texto.</p>\n<p>Hemos creado 2 instancias de car, en la primera una es <code class=\"language-text\">huracan</code> con la marca <code class=\"language-text\">lamborghini</code> y en la segunda con la marca <code class=\"language-text\">bugatti</code>, en ambas instancias tenemos diferentes marcas <code class=\"language-text\">brand</code> pero tienen el mismo método con diferentes <code class=\"language-text\">this</code>.</p>\n<h2>Referencias</h2>\n<ul>\n<li>You Don't Know JS: this &#x26; Object Prototypes Book by Kyle Simpson</li>\n</ul>","excerpt":"¿Que es this? Es la referencia de  cuándo una función es llamada, y es determinada completamente en como es llamada dicha función. Reglas Por defecto Binding La…","frontmatter":{"title":"¿Qué es this en javascript? y ¿Cuales son sus reglas?","description":null,"featuredImage":{"childImageSharp":{"fluid":{"src":"/static/6ed51f906004a4623d096f8d527e97ec/ee604/this-es.png"},"resize":{"src":"/static/6ed51f906004a4623d096f8d527e97ec/f3583/this-es.png","height":675,"width":1200}}}},"fields":{"langKey":"es"}}},"pageContext":{"slug":"/es/blog/this/","langKey":"es"}}}